#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@author: Jorge Garc√≠a Villanueva <jorgeg09@ucm.es>
"""

#Importing libraries
import os
import click
import shutil
import logging
import subprocess
import call_graph_paths as cg_paths

logger = logging.getLogger(__name__)

@click.command()
@click.option("-f", "--file", help="Name of the main file", required=True)
def main(file):
    """Entrypoint of the module
    """
    execute_doxygen()
    save_main(file)
    delete_generated_files()
    cg, labels = cg_paths.main()

def execute_doxygen():
    """ Calls the system to execute the Doxygen
    """
    try:
        call = ['doxygen', 'Doxyfile']
        subprocess.check_call(call)
    except subprocess.CalledProcessError as e:
        logger.error(e)
        raise
        
def save_main(main_name):
    """ Saves the source code based on the paths retrieved from the cg
    """
    try:
        directory = '../../../results/single/'
        if not os.path.exists(directory):
            os.mkdir(directory)
        found = False;
        for root, dirs, files in os.walk('html'):
            for file in files:
                if file.startswith(main_name.split('.')[0]) and file.endswith('.dot'):
                    name = 'cgraph.dot'
                    if os.path.exists(directory+name):
                        os.remove(directory+name)
                    os.rename('html/'+file, name)
                    shutil.copy(name, directory)
                    found = True
                    break
        if found == False:
            raise Exception('Error finding doxygen generated files...')
    except FileNotFoundError as e:
        logger.error(e)
        raise
            

def delete_generated_files():
    """Deletes the unnecessary files generated by the cg
    """
    try:
        shutil.rmtree('html')
    except FileNotFoundError as e:
        logger.error(e)
        raise
    
if __name__ == '__main__':
    main()
    
